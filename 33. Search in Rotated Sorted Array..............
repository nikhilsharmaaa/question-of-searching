class Solution {
    public int search(int[] nums, int target) {
    int pivot = pivot (nums);
    int start = 0;
    int  end= nums.length-1;
    
    if (pivot ==-1){
        //normal binary search 
        return binarySearch(nums, target , start ,end );
    }
    if (nums[pivot]== target){
        return pivot ;
    }
    if (nums[start] > target){
        start  = pivot +1;
        return  binarySearch(nums, target , start ,end );
        
    }
    else  {
        end   = pivot - 1;
         return  binarySearch(nums, target , start ,end );
    }


   

    }




   //finding the pivot elements.. by using fuction  methords ....
    int  pivot (int[]nums ){
        int start = 0;
        int end = nums.length-1;
        
        while(start<=end){
            int  mid = start +(end -start)/2;
             if (mid <end && nums[mid]>nums[mid+1]){
                 return  mid;
             }
              if (mid >start && nums[mid-1]>nums[mid]){
                 return mid-1;
             }
            if (nums[mid]<=nums[start]){
                end = mid-1;
            }
            else  {
                start = mid+1 ;

            }
        }
        return -1;

    }
    //fuction for binarry search ... common fction .
    int binarySearch  (int[] nums , int target , int start , int end ){
        while (start<= end ){
            int mid = start +(end -start)/2;
            if (nums[mid]>target){
                end = mid-1;

            }
            else if (nums [mid]<target){
                start = mid +1;

            }
            else {
                return mid ;
            }
        }
        return -1;

    } 

    }
   
