class Solution {
    public int search(int[] nums, int target) {
    int pivot = pivot (nums);
    int start = 0;
    int  end= nums.length-1;
    int start2 = pivot+1;
    //using binary search in first half part of array .. 
    //from start to pivot in sorted array nums ....
    while (start<= pivot){
         int mid2 = start +(pivot -start)/2;
            if (target <nums[mid2]){
                
                pivot  = mid2-1 ;
            }
            else if (target >nums[mid2]) {
                start  =mid2 ;

            }
            else {
                return mid2;
            }
    }
     //applying binary search in second half of nums array 
     //from pivot +1  which is start2  till end in sorted arr ..

     while (start2<= end ){
         int mid3 = start2 +(end -start2)/2;
            if (target <nums[mid3]){
                end  =mid3 -1 ;
            }
            else if (target >nums[mid3]) {
                start2 = mid3  ;

            }
            else {
                return mid3;
            }
    }
    //now return the ans if no index found then return -1.....
    return -1;

    }
    //finding the pivot elements.. by using fuction  methords ....
    int  pivot (int[]nums ){
        int start = 0;
        int end = nums.length-1;
        while(start<=end){
            int mid = start +(end -start)/2;
            if (nums[mid]<nums[start]){
                end = mid-1;
            }
            else {
                start = mid ;

            }
        }
        return start;

    }
}
